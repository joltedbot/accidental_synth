import { Theme } from "theme.slint";
import { Constant } from "constants.slint";
import { MomentaryButton, Panel, PanelLabel, ComponentLabel, DropDownMenu, HorizontalSpacer, VerticalControlLabel } from "components.slint";
import { Button, StandardButton } from "std-widgets.slint";


export component AudioSettings inherits VerticalLayout {
    in property <[string]> output-device-list: Theme.empty-dropdown-value;
    in property <[string]> output-left-channel-list: Theme.empty-dropdown-value;
    in property <[string]> output-right-channel-list: Theme.empty-dropdown-value;
    in property <[string]> output-sample-rate-list: Theme.empty-dropdown-value;
    in property <int> current-output-device-index: 0;
    in property <int> current-output-left-channel-index: 0;
    in property <int> current-output-right-channel-index: 0;
    in property <int> current-sample-rate-index: 0;
    callback audio-output-device-changed(string);
    callback audio-output-left-channel-changed(string);
    callback audio-output-right-channel-changed(string);
    callback audio-sample-rate-changed(string);

    padding: Theme.osc-controls-panel-padding;
    spacing: Theme.osc-controls-panel-spacing;

    device := DropDownMenu {
        label: "Output Device";
        dropdown-width: Theme.oscillator-panel-widget-width;
        value-list: output-device-list;
        value-index: current-output-device-index;
        drop_down_changed(device) => {
            audio-output-device-changed(device);
        }
    }

    HorizontalLayout {
        padding: Theme.osc-controls-panel-padding;
        spacing: Theme.osc-controls-panel-spacing;

        left := DropDownMenu {
            label: "Left Channel";
            value-list: output-left-channel-list;
            value-index: current-output-left-channel-index;
            drop_down_changed(left) => {
                audio-output-left-channel-changed(left);
            }
        }

        right := DropDownMenu {
            label: "Right Channel";
            value-list: output-right-channel-list;
            value-index: current-output-right-channel-index;
            drop_down_changed(right) => {
                audio-output-left-channel-changed(right);
            }
        }
    }

    sample := DropDownMenu {
        label: "Sample Rate";
        dropdown-width: Theme.oscillator-panel-widget-width;
        value-list: output-sample-rate-list;
        value-index: current-sample-rate-index;
        drop_down_changed(rate) => {
            audio-sample-rate-changed(rate);
        }
    }
}

export component MidiSettings inherits VerticalLayout {
    in property <[string]> input-port-list: Theme.empty-dropdown-value;
    in property <int> current-input-port-index: 0;
    in property <int> current-input-channel-index: 0;
    callback midi-input-port-changed(string);
    callback midi-input-channel-changed(string);

    padding: Theme.osc-controls-panel-padding;
    spacing: Theme.osc-controls-panel-spacing;

    port := DropDownMenu {
        label: "Input Port";
        value-list: input-port-list;
        value-index: current-input-port-index;
        dropdown-width: Theme.oscillator-panel-widget-width;
        drop_down_changed(left) => {
            midi-input-port-changed(left);
        }
    }

    channel := DropDownMenu {
        label: "Channel";
        value-list: Constant.MIDI_CHANNELS;
        value-index: current-input-channel-index;
        dropdown-width: Theme.oscillator-panel-widget-width;
        drop_down_changed(left) => {
            midi-input-channel-changed(left);
        }
    }
}

export component SettingsIcon inherits Image {
    source: Theme.settings-image;
    height: Theme.header-logo-height;
    width: Theme.header-logo-height;
    colorize: touch.pressed ? black : transparent;
    callback open-settings();

    touch := TouchArea {
        changed pressed => {
            if (self.pressed) {
                open-settings();
            }
        }
    }
}

export component SettingsWindow inherits PopupWindow {
    in property <[string]> output-device-list: Theme.empty-dropdown-value;
    in property <[string]> output-left-channel-list: Theme.empty-dropdown-value;
    in property <[string]> output-right-channel-list: Theme.empty-dropdown-value;
    in property <[string]> output-sample-rate-list: Theme.empty-dropdown-value;
    in property <int> current-output-device-index: 0;
    in property <int> current-output-left-channel-index: 0;
    in property <int> current-output-right-channel-index: 0;
    in property <int> current-sample-rate-index: 0;
    in property <[string]> input-port-list: Theme.empty-dropdown-value;
    in property <int> current-input-port-index: 0;
    in property <int> current-input-channel-index: 0;

    callback audio-output-device-changed(string);
    callback audio-output-left-channel-changed(string);
    callback audio-output-right-channel-changed(string);
    callback audio-sample-rate-changed(string);
    callback midi-input-port-changed(string);
    callback midi-input-channel-changed(string);

    width: Theme.settings-panel-width;
    height: Theme.settings-panel-height;
    x: Theme.window-width / 2 - Theme.settings-panel-width / 2;
    y: Theme.window-height / 2 - Theme.settings-panel-height / 2;
    close-policy: no-auto-close;

    Rectangle {
        background: Theme.settings-window-background;
        border-width: Theme.settings-window-border-width;
        border-color: Theme.settings-window-border-colour;
        border-bottom-left-radius: Theme.settings-window-border-radius;
        border-bottom-right-radius: Theme.settings-window-border-radius;
        border-top-left-radius: Theme.settings-window-border-radius;
        border-top-right-radius: Theme.settings-window-border-radius;

        VerticalLayout {
            padding: Theme.osc-controls-panel-padding;
            spacing: Theme.osc-controls-panel-spacing;
            alignment: start;

            HorizontalLayout {
                padding: Theme.osc-controls-panel-padding;
                spacing: Theme.osc-controls-panel-spacing;
                alignment: start;

                VerticalLayout {
                    padding: Theme.osc-controls-panel-padding;
                    spacing: Theme.osc-controls-panel-spacing;
                    alignment: start;

                    PanelLabel {
                        label: "Audio Settings";
                    }

                    AudioSettings {
                        audio-output-device-changed(device) => {
                            audio-output-device-changed(device);
                        }
                        audio-output-left-channel-changed(left) => {
                            audio-output-left-channel-changed(left);
                        }
                        audio-output-right-channel-changed(right) => {
                            audio-output-right-channel-changed(right);
                        }
                        audio-sample-rate-changed(rate) => {
                            audio-sample-rate-changed(rate);
                        }
                    }
                }

                VerticalLayout {
                    padding: Theme.osc-controls-panel-padding;
                    spacing: Theme.osc-controls-panel-spacing;
                    alignment: start;

                    PanelLabel {
                        label: "Midi Settings";
                    }

                    MidiSettings {
                        midi-input-port-changed(port) => {
                            midi-input-port-changed(port);
                        }
                        midi-input-channel-changed(channel) => {
                            midi-input-channel-changed(channel);
                        }
                    }
                }
            }

            HorizontalSpacer { }

            StandardButton {
                kind: close;
                clicked => {
                    root.close();
                }
            }
        }
    }
}
