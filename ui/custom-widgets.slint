import { Theme } from "../ui/theme.slint";
import {  Palette, StyleMetrics } from "std-widgets.slint";

/*  Palette - Fluent Dark
    foreground - white
    background - dark gray
    alternate f - white
    alternate b - lighter dark grey than  background background
    control f - white
    control b - Transparent
    accent f - black
    accent b - Control tracks in the theme
    selection f - black
    selection b - other blue
*/

export component VerticalSlider inherits Rectangle {

    function calculate_output_value(position: length) -> float {
        let output_range = maximum - minimum;
        let position_as_percent = (track.height - position) / track.height;
        let scaled_value = minimum + (output_range * position_as_percent);
        return scaled_value;
    }

    function calculate_default_position(start: length, height: length) -> length {
        return start + height - (height * (default-value / maximum));
    }

    function calculate_mouse_position(mouse-y: length) -> length {
        return mouse-y.clamp(track.y, track.y + track.height);
    }

    in property <float> minimum: 0.0;
    in property <float> maximum: 100.0;
    in property <float> default-value: 0.0;
    callback updated(float);

    property <length> track-width: 6px;
    property <length> handle-width: 20px;
    property <length> handle-height: 10px;
    property <length> handle-border-width: 4px;
    property <length> handle-radius: 5px;

    width: 50px;
    height: 100px;

    touch := TouchArea {
        width: parent.width;
        height: parent.height;

        moved => {
            indicator.position = calculate_mouse_position(self.mouse-y);
        }

        double-clicked => {
            indicator.position = indicator.default-position;
        }
    }


    handle := Rectangle {
        z: 2;
        y: indicator.y.clamp(track.y, track.height - handle-height);
        width: handle-width;
        height: handle-height;
        border-color: Theme.handle-border-colour;
        border-width: handle-border-width;
        border-radius: handle-radius;
        background: Theme.handle-background-colour;
    }

    track := Rectangle {
        width: track-width;
        height: parent.height;
        background: Theme.slider-track-colour;
        clip: true;

        indicator := Rectangle {
            in-out property <length> default-position: calculate_default_position(parent.y, parent.height);
            in-out property <length> position: default-position;
            y: position;
            width: parent.width;
            height: parent.height;
            background: Theme.slider-indicator-colour;

            changed y => {
                let output = calculate_output_value(self.y);
                updated(output);
            }
        }
    }
}

export component HorzontalSlider inherits Rectangle {
    in property <float> minimum: 0;
    in property <float> maximum: 100;
    in property <float> default-value: 0;
    callback updated(float);

    property <length> track-height: 6px;
    property <length> handle-height: 20px;
    property <length> handle-width: 10px;
    property <length> handle-border-width: 4px;
    property <length> handle-radius: 5px;

    width: 100px;
    height: 50px;


    function calculate_output_value(position: length) -> float {
        let output_range = maximum - minimum;
        let position_as_percent = (position + track.width) / track.width;
        let scaled_value = minimum + (output_range * position_as_percent);
        return scaled_value;
    }

    function calculate_default_position(start: length, width: length) -> length {
        let output_range = maximum - minimum;
        let value_as_percent = abs((minimum + default_value)/output_range);
        let scaled_position = start - width + (width * value_as_percent);
        return scaled_position;
    }

    function calculate_mouse_position(mouse-x: length) -> length {
        return mouse-x.clamp(track.x, track.x + track.width) - indicator.width;
    }

    touch := TouchArea {
        width: parent.width;
        height: parent.height;

        moved => {
            indicator.position = calculate_mouse_position(self.mouse-x);
        }

        double-clicked => {
            indicator.position = indicator.default-position;
        }
    }

    handle := Rectangle {
        z: 2;
        x: indicator.x + indicator.width - (handle-width/2);
        width: handle-width;
        height: handle-height;
        border-color: Theme.handle-border-colour;
        border-width: handle-border-width;
        border-radius: handle-radius;
        background: Theme.handle-background-colour;
    }

    track := Rectangle {
        width: parent.width;
        height: track-height;
        background: Theme.slider-track-colour;
        clip: true;

        indicator := Rectangle {
            in-out property <length> default-position: calculate_default_position(parent.x, parent.width);
            in-out property <length> position: default-position;
            x: position;
            width: parent.width;
            height: parent.height;
            background: Theme.slider-indicator-colour;

            changed x => {
                let output = calculate_output_value(self.x);
                updated(output);
            }
        }
    }
}
