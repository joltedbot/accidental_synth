import { Theme } from "theme.slint";
import { Constant } from "constants.slint";
import { Slider, SpinBox, ComboBox, Switch, Palette, StyleMetrics, Button } from "std-widgets.slint";
import { VerticalSlider, HorzontalSlider, BalanceSlider } from "custom-widgets.slint";



export component Panel inherits Rectangle {
    border-width: Theme.panel-border-width;
    background: Theme.panel-background;
    border-color: Theme.panel-border-colour;
    border-bottom-left-radius: Theme.panel-border-radius;
    border-bottom-right-radius: Theme.panel-border-radius;
}

export component HorizontalSpacer inherits HorizontalLayout {
    in property <length> top-padding: 0px;
    in property <length> bottom-padding: 0px;

    padding-top: top-padding;
    padding-bottom: bottom-padding;

    Rectangle {
        background: Theme.spacer-color;
        height: 3px;
    }
}

export component VerticalSpacer inherits VerticalLayout {
    in property <length> left-padding: 10px;
    in property <length> right-padding: 10px;

    padding-left: left-padding;
    padding-right: right-padding;

    Rectangle {
        background: Theme.spacer-color;
        width: 3px;
    }
}

export component PanelLabel inherits VerticalLayout {
    in property <string> label;
    spacing: 5px;
    alignment: start;

    Text {
        horizontal-alignment: center;
        font-size: Theme.panel-label-font-size;
        font-weight: Theme.panel-label-font-weight;
        text: label;
    }

    HorizontalSpacer { }
}

export component SectionLabel inherits VerticalLayout {
    in property <string> label;
    in property <angle> angle;

    Text {
        rotation-angle: angle;
        horizontal-alignment: center;
        font-size: Theme.section-label-font-size;
        font-weight: Theme.section-label-font-weight;
        text: label;
    }
}

export component ComponentLabel inherits VerticalLayout {
    in property <string> label;

    Text {
        horizontal-alignment: center;
        font-size: Theme.component-label-font-size;
        font-weight: Theme.component-label-font-weight;
        text: label;
    }
}

export component HorizontalControlLabel inherits Rectangle {
    in property <string> label: Theme.control-label-default-string;
    in property <string> value-postfix;
    in property <string> value;
    in property <bool> enabled: true;

    property <color> text-color: enabled ? Theme.default-font-color : Theme.default-font-color.darker(2);

    HorizontalLayout {
        Text {
            font-size: Theme.section-label-font-size;
            font-weight: Theme.section-label-font-weight;
            color: text-color;
            text: label;
        }

        Text {
            font-size: Theme.section-label-font-size;
            font-weight: Theme.section-label-font-weight;
            color: text-color;
            horizontal-alignment: right;
            width: 50px;
            text: value;
        }

        Text {
            font-size: Theme.section-label-font-size;
            font-weight: Theme.section-label-font-weight;
            color: text-color;
            text: " " + value-postfix;
        }
    }
}

export component VerticalControlLabel inherits Rectangle {
    in property <string> label;
    in property <string> value-postfix;
    in property <string> value;
    in property <bool> enabled: true;
    property <color> text-color: enabled ? Theme.default-font-color : Theme.default-font-color.darker(2);

    VerticalLayout {
        Text {
            horizontal-alignment: center;
            text: label + " " + value-postfix;
            color: text-color;
        }

        HorizontalLayout {
            Text {
                horizontal-alignment: center;
                width: 50px;
                text: value;
                color: text-color;
            }
        }
    }
}

export component FilterControlLabel inherits Rectangle {
    in property <string> label;
    in property <bool> enabled: true;
    property <color> text-color: enabled ? Theme.default-font-color : Theme.default-font-color.darker(2);

    Text {
        horizontal-alignment: center;
        width: 100px;
        text: label;
        color: text-color;
    }
}

export component ToggleSwitch inherits VerticalLayout {
    in-out property <bool> is_on: false;
    in-out property <length> switch-height: 30px;
    in-out property <string> label;
    callback toggle_switch_update(bool);
    alignment: start;

    Text {
        horizontal-alignment: center;
        font-size: Theme.section-label-font-size;
        font-weight: Theme.section-label-font-weight;
        text: label;
    }

    HorizontalLayout {
        alignment: center;
        Switch {
            height: switch-height;
            checked: is_on;
            toggled() => {
                toggle_switch_update(self.checked);
            }
        }
    }
}

export component MomentaryButton inherits VerticalLayout {
    in property <string> label;
    in property <length> button-width: 100px;
    in property <length> button-height: 30px;
    callback momentary-button-pressed();
    alignment: center;
    spacing: 5px;

    Button {
        width: button-width;
        height: button-height;
        text: label;

        changed pressed => {
            self.primary = self.pressed;
        }

        clicked() => {
            momentary-button-pressed();
        }
    }
}

export component HorizontalParameterSlider inherits VerticalLayout {
    in property <string> label: Theme.control-label-default-string;
    in property <string> value-postfix;
    in property <float> default-value;
    in property <float> minimum;
    in property <float> maximum;
    in property <length> slider-width: 100px;
    in property <length> slider-height: 30px;
    in property <bool> enabled: true;
    callback horizontal-int-slider-changed(int);

    spacing: 5px;

    hslider-label := HorizontalControlLabel {
        label: label;
        value: default-value;
        value-postfix: value-postfix;
        enabled: enabled;
    }

    hslider := HorzontalSlider {
        height: slider-height;
        width: slider-width;
        minimum: minimum;
        maximum: maximum;
        default-value: default-value;
        enabled: enabled;

        updated(value) => {
            hslider-label.value = value.round();
            horizontal-int-slider-changed(value.round());
        }
    }
}

export component CenteredParameterSlider inherits VerticalLayout {
    in property <string> label;
    in property <string> value-postfix;
    in property <bool> show-value: true;
    in property <float> default-value;
    in property <float> minimum;
    in property <float> maximum;
    in property <length> slider-width: 100px;
    in property <length> slider-height: 25px;
    in property <bool> enabled: true;
    callback horizontal-int-slider-changed(int);

    alignment: start;
    spacing: 5px;

    hslider-label := HorizontalControlLabel {
        label: label;
        enabled: enabled;
        value: show-value ? default-value : "";
        value-postfix: value-postfix;
    }

    hslider := BalanceSlider {
        height: slider-height;
        width: slider-width;
        minimum: minimum;
        maximum: maximum;
        enabled: enabled;

        updated(value) => {
            if (show-value) {
                hslider-label.value = value.round();
            }
            horizontal-int-slider-changed(value.round());
        }
    }
}

export component FilterSlider inherits VerticalLayout {
    in property <string> label;
    in property <int> step;
    in property <float> minimum: 0;
    in property <float> maximum: 100;
    in property <bool> inverse: false;
    in property <int> default-value: 0;
    in property <length> slider-width: 25px;
    in property <length> slider-height: 100px;
    in property <bool> enabled: true;
    callback filter-int-slider-changed(int);
    spacing: 10px;

    FilterControlLabel {
        label: label;
        enabled: root.enabled;
    }

    HorizontalLayout {
        alignment: center;
        fslider := VerticalSlider {
            height: slider-height;
            width: slider-width;
            default-value: default-value;
            minimum: minimum;
            maximum: maximum;
            enabled: root.enabled;
            updated(value) => {
                filter-int-slider-changed(value)
            }
        }
    }
}

export component VerticalIntSlider inherits VerticalLayout {
    in property <string> label;
    in property <string> value-postfix;
    in property <int> default-value;
    in property <int> step;
    in property <int> minimum;
    in property <int> maximum;
    in property <length> slider-width: 25px;
    in property <length> slider-height: 100px;
    callback vertical-int-slider-changed(int);

    spacing: 5px;

    vslider-label := VerticalControlLabel {
        label: label;
        value: default-value;
        value-postfix: value-postfix;
    }

    HorizontalLayout {
        alignment: center;
        hslider := Slider {
            height: slider-height;
            width: slider-width;
            step: step;
            minimum: minimum;
            maximum: maximum;
            value: default-value;
            orientation: vertical;

            changed value => {
                vslider-label.value = self.value.round();
                vertical-int-slider-changed(self.value);
            }
        }
    }
}

export component IntSpinBox inherits VerticalLayout {
    in property <string> label;
    in property <string> value-postfix;
    in property <int> default-value;
    in property <int> step;
    in property <int> minimum;
    in property <int> maximum;
    in property <bool> enabled: true;
    in property <length> spinbox-width: 100px;
    in property <length> spinbox-height: 25px;
    callback horizontal-int-spinbox-changed(int);

    alignment: start;
    spacing: 5px;

    hslider-label := HorizontalControlLabel {
        label: label;
        enabled: enabled;
        value-postfix: value-postfix;
    }

    hspinbox := SpinBox {
        height: spinbox-height;
        width: spinbox-width;
        step-size: step;
        minimum: minimum;
        maximum: maximum;
        enabled: enabled;
        value: default-value;

        changed value => {
            horizontal-int-spinbox-changed(self.value);
        }
    }
}

export component DropDownMenu inherits VerticalLayout {
    in property <string> label;
    in property <[string]> default-model;
    in property <length> dropdown-width: 100px;
    in property <length> dropdown-height: 25px;
    in property <bool> enabled: true;
    callback drop_down_changed(string);

    spacing: 5px;

    HorizontalControlLabel {
        label: label;
        enabled: enabled;
    }

    dropdown := ComboBox {
        height: dropdown-height;
        width: dropdown-width;
        model: default-model;
        enabled: enabled;

        selected(value) => {
            drop_down_changed(value);
        }
    }
}

export component MixerMute inherits VerticalLayout {
    in-out property <bool> is_muted;
    in-out property <length> switch-height: 30px;
    callback mixer_mute_update(bool);

    Text {
        horizontal-alignment: center;
        font-size: Theme.section-label-font-size;
        font-weight: Theme.section-label-font-weight;
        text: "Mute";
    }

    HorizontalLayout {
        alignment: center;
        Switch {
            height: switch-height;

            toggled() => {
                mixer_mute_update(self.checked);
            }
        }
    }
}

export component MixerBalance inherits VerticalLayout {
    in property <float> default-value: Constant.DEFAULT_BALANCE;
    callback mixer-balance-update(float);

    Text {
        horizontal-alignment: center;
        font-size: Theme.section-label-font-size;
        font-weight: Theme.section-label-font-weight;
        text: Theme.mixer-balance-label;
    }

    BalanceSlider {
        height: 30px;
        width: 50px;
        maximum: Constant.MAX_LEFT_BALANCE;
        minimum: Constant.MAX_RIGHT_BALANCE;
        updated(value) => {
            mixer-balance-update(value);
        }
    }
}

export component MixerLevel inherits VerticalLayout {
    in property <float> minimum: 0.0;
    in property <float> maximum: 100.0;
    in property <float> default-value: 0.0;
    in property <length> slider-height: 100px;
    callback mixer-level-update(float);

    title := ComponentLabel {
        label: Theme.mixer-level-label;
    }

    VerticalSlider {
        minimum: minimum;
        maximum: maximum;
        default-value: default-value;
        height: slider-height;
        updated(value) => {
            mixer-level-update(value);
        }
    }
}

export component EnvelopeSection inherits VerticalLayout {
    alignment: start;
    spacing: 5px;

    HorizontalLayout {
        padding: Theme.osc-controls-panel-padding;
        spacing: Theme.osc-controls-panel-spacing;
        alignment: space-between;

        filter_attack := FilterSlider {
            label: Theme.filter-label-envelope-attack;
            width: 35px;
            minimum: 0;
            maximum: 100;
            default-value: 0;
            slider-height: 90px;
        }

        filter_decay := FilterSlider {
            label: Theme.filter-label-envelope-decay;
            width: 35px;
            minimum: 0;
            maximum: 100;
            default-value: 0;
            slider-height: 90px;
        }

        filter_sustain := FilterSlider {
            label: Theme.filter-label-envelope-sustain;
            width: 35px;
            minimum: 0;
            maximum: 100;
            default-value: 0;
            slider-height: 90px;
        }

        filter_release := FilterSlider {
            label: Theme.filter-label-envelope-release;
            width: 35px;
            minimum: 0;
            maximum: 100;
            default-value: 0;
            slider-height: 90px;
        }

        ToggleSwitch {

            label: Theme.filter-label-envelope-inverted;
        }
    }
}

export component FixedCenterLFOSection inherits VerticalLayout {
    alignment: start;
    spacing: 5px;

    VerticalLayout {
        alignment: start;

        HorizontalLayout {
            padding: Theme.osc-controls-panel-padding;
            spacing: Theme.osc-controls-panel-spacing;
            alignment: start;

            frequency := HorizontalParameterSlider {
                label: Theme.filter-label-lfo-frequency;
                minimum: 0;
                maximum: 100;
                default-value: 0;
                slider-width: Theme.filter-panel-widget-width;
            }

            wave-shape := DropDownMenu {
                label: Theme.filter-label-lfo-wave-shape;
                default-model: Constant.LFO_WAVE_SHAPES;
                dropdown-width: Theme.filter-panel-widget-width;
            }
        }

        HorizontalLayout {
            padding: Theme.osc-controls-panel-padding;
            spacing: Theme.osc-controls-panel-spacing;
            alignment: start;

            phase := HorizontalParameterSlider {
                label: Theme.filter-label-lfo-phase;
                minimum: 0;
                maximum: 100;
                default-value: 0;
                slider-width: Theme.filter-panel-widget-width;
            }

            reset := MomentaryButton {
                label: Theme.filter-label-lfo-reset;
                button-width: 100px;
                button-height: 27px;
            }
        }
    }
}
