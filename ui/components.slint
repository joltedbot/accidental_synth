import { Theme } from "../ui/theme.slint";
import { Slider, SpinBox, ComboBox, Switch, Palette, StyleMetrics } from "std-widgets.slint";
import { VerticalSlider, HorzontalSlider } from "custom-widgets.slint";


export component Panel inherits Rectangle {
    border-width: Theme.panel-border-width;
    background: Theme.panel-background;
    border-color: Theme.panel-border-colour;
    border-bottom-left-radius: Theme.panel-border-radius;
    border-bottom-right-radius: Theme.panel-border-radius;
}

export component HorizontalSpacer inherits HorizontalLayout {
    padding-top: 10px;
    padding-bottom: 5px;

    Rectangle {
        background: Theme.spacer-color;
        height: 3px;
    }
}

export component VerticalSpacer inherits VerticalLayout {
    padding-left: 10px;
    padding-right: 10px;

    Rectangle {
        background: Theme.spacer-color;
        width: 3px;
    }
}

export component PanelLabel inherits VerticalLayout {
    in property <string> label;

    Text {
        font-size: Theme.panel-label-font-size;
        font-weight: Theme.panel-label-font-weight;
        text: label;
    }

    HorizontalSpacer { }
}

export component SectionLabel inherits VerticalLayout {
    in property <string> label;
    in property <angle> angle;

    Text {
        rotation-angle: angle;
        horizontal-alignment: center;
        font-size: Theme.section-label-font-size;
        font-weight: Theme.section-label-font-weight;
        text: label;
    }
}

export component ComponentLabel inherits VerticalLayout {
    in property <string> label;

    Text {
        horizontal-alignment: center;
        font-size: Theme.component-label-font-size;
        font-weight: Theme.component-label-font-weight;
        text: label;
    }
}

export component HorizontalControlLabel inherits Rectangle {
    in property <string> label;
    in property <string> value-postfix;
    in property <string> value;
    callback reset();

    TouchArea {
        double-clicked() => {
            reset();
        }
    }

    HorizontalLayout {
        Text {
            text: label + ": ";
        }

        Text {
            horizontal-alignment: right;
            width: 50px;
            text: value;
        }

        Text {
            text: " " + value-postfix;
        }
    }
}

export component VerticalControlLabel inherits Rectangle {
    in property <string> label;
    in property <string> value-postfix;
    in property <string> value;
    callback reset();

    TouchArea {
        double-clicked() => {
            reset();
        }
    }

    VerticalLayout {
        Text {
            horizontal-alignment: center;
            text: label + " " + value-postfix;
        }

        HorizontalLayout {
            Text {
                horizontal-alignment: center;
                width: 50px;
                text: value;
            }
        }
    }
}

export component FilterControlLabel inherits Rectangle {
    in property <string> label;
    callback reset();

    TouchArea {
        double-clicked() => {
            reset();
        }
    }

    Text {
        horizontal-alignment: center;
        width: 100px;
        text: label;
    }
}

export component HorizontalParameterSlider inherits VerticalLayout {
    in property <string> label;
    in property <string> value-postfix;
    in property <float> default-value;
    in property <float> minimum;
    in property <float> maximum;
    in property <length> slider-width: 100px;
    in property <length> slider-height: 25px;
    callback horizontal-int-slider-changed(int);

    spacing: 5px;

    hslider-label := HorizontalControlLabel {
        label: label;
        value: default-value;
        value-postfix: value-postfix;
        reset => {
            hslider.default-value = default-value;
        }
    }

    hslider := HorzontalSlider {
        height: slider-height;
        width: slider-width;
        minimum: minimum;
        maximum: maximum;
        default-value: default-value;

        updated(value) => {
            hslider-label.value = value.round();
            horizontal-int-slider-changed(value.round());
        }
    }
}

export component FilterSlider inherits VerticalLayout {
    in property <string> label;
    in property <int> step;
    in property <float> minimum: 0;
    in property <float> maximum: 100;
    in property <bool> inverse: false;
    in property <int> default-value: 0;
    in property <length> slider-width: 25px;
    in property <length> slider-height: 100px;
    callback filter-int-slider-changed(int);
    spacing: 10px;

    FilterControlLabel {
        label: label;
    }

    HorizontalLayout {
        alignment: center;
        fslider := VerticalSlider {
            height: 220px;
            default-value: default-value;
            minimum: minimum;
            maximum: maximum;
            updated(value) => {
                filter-int-slider-changed(value)
            }
        }
    }
}

export component VerticalIntSlider inherits VerticalLayout {
    in property <string> label;
    in property <string> value-postfix;
    in property <int> default-value;
    in property <int> step;
    in property <int> minimum;
    in property <int> maximum;
    in property <length> slider-width: 25px;
    in property <length> slider-height: 100px;
    callback vertical-int-slider-changed(int);

    spacing: 5px;

    vslider-label := VerticalControlLabel {
        label: label;
        value: default-value;
        value-postfix: value-postfix;
        reset => {
            hslider.value = default-value;
        }
    }

    HorizontalLayout {
        alignment: center;
        hslider := Slider {
            height: slider-height;
            width: slider-width;
            step: step;
            minimum: minimum;
            maximum: maximum;
            value: default-value;
            orientation: vertical;

            changed value => {
                vslider-label.value = self.value.round();
                vertical-int-slider-changed(self.value);
            }
        }
    }
}

export component IntSpinBox inherits VerticalLayout {
    in property <string> label;
    in property <string> value-postfix;
    in property <int> default-value;
    in property <int> step;
    in property <int> minimum;
    in property <int> maximum;
    in property <length> spinbox-width: 100px;
    in property <length> spinbox-height: 25px;
    callback horizontal-int-spinbox-changed(int);

    spacing: 5px;

    hslider-label := HorizontalControlLabel {
        label: label;
        value-postfix: value-postfix;
        reset => {
            hspinbox.value = default-value;
        }
    }

    hspinbox := SpinBox {
        height: spinbox-height;
        width: spinbox-width;
        step-size: step;
        minimum: minimum;
        maximum: maximum;
        value: default-value;

        changed value => {
            horizontal-int-spinbox-changed(self.value);
        }
    }
}

export component WaveShapeDropDown inherits VerticalLayout {
    in property <string> label;
    in property <[string]> default-model;
    in property <length> dropdown-width: 100px;
    in property <length> dropdown-height: 25px;
    callback wave_shape_changed(string);

    spacing: 5px;

    Text {
        text: label;
    }

    dropdown := ComboBox {
        height: dropdown-height;
        width: dropdown-width;
        model: default-model;

        selected(value) => {
            wave_shape_changed(value);
        }
    }
}

export component MixerMute inherits VerticalLayout {
    in-out property <bool> is_muted;
    Text {
        horizontal-alignment: center;
        font-size: Theme.section-label-font-size;
        font-weight: Theme.section-label-font-weight;
        text: "Mute";
    }

    HorizontalLayout {
        alignment: center;
        Switch {
            height: 30px;
        }
    }
}

export component MixerBalance inherits VerticalLayout {
    in property <float> default-value: 50;

    Text {
        horizontal-alignment: center;
        font-size: Theme.section-label-font-size;
        font-weight: Theme.section-label-font-weight;
        text: Theme.mixer-balance-label;
    }

    HorzontalSlider {
        height: 30px;
        width: 50px;
        default-value: default-value;
    }
}

export component MixerLevel inherits VerticalLayout {
    in property <float> minimum: 0.0;
    in property <float> maximum: 100.0;
    in property <float> default-value: 0.0;

    ComponentLabel {
        label: Theme.mixer-level-label;
    }

    VerticalSlider {
        minimum: minimum;
        maximum: maximum;
        default-value: default-value;
    }
}
