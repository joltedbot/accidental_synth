import { Panel, VerticalSpacer, SectionLabel, CenteredParameterSlider, PanelLabel, HorizontalSpacer, ComponentLabel, MixerLevel, MixerBalance,
MixerMute,
ToggleSwitch, HorizontalParameterSlider, IntSpinBox, EnvelopeSection, FixedCenterLFOSection } from "components.slint";
import { Theme } from "theme.slint";
import { Constant } from "constants.slint";
import { VerticalSlider, HorzontalSlider, BalanceSlider } from "custom-widgets.slint";
import { ComboBox, TextEdit } from "std-widgets.slint";

export component MixerStrip inherits VerticalLayout {
    in-out property <string> label;
    in property <float> default-value: 0.0;
    callback mixer-level-update(float);
    callback mixer-balance-update(float);
    callback mixer_mute_update(bool);

    width: 56px;

    SectionLabel {
        label: label;
    }

    HorizontalSpacer { }

    VerticalLayout {
        padding: Theme.global-panel-padding;
        spacing: Theme.global-panel-spacing + 5px;

        alignment: space-between;

        MixerBalance {
            mixer-balance-update(value) => {
                root.mixer-balance-update(value);
            }
        }

        MixerLevel {
            default-value: default-value;
            slider-height: 100px;

            mixer-level-update(value) => {
                root.mixer-level-update(value);
            }
        }

        MixerMute {
            mixer_mute_update(is_muted) => {
                root.mixer_mute_update(is_muted);
            }
        }
    }
}

export component OutputMixer inherits VerticalLayout {
    in property <float> default-level: Constant.DEFAULT_OUTPUT_MIXER_LEVEL_NORMAL;
    callback output-level-update(float);
    callback output-balance-update(float);
    callback output-mute-update(bool);

    padding: Theme.global-panel-padding;
    spacing: Theme.global-panel-spacing;

    output := MixerStrip {
        label: Theme.output-mixer-label;
        default-value: default-level;
        mixer-balance-update(balance) => {
            output-balance-update(balance);
        }
        mixer-level-update(level) => {
            output-level-update(level);
        }
        mixer_mute_update(is_muted) => {
            output-mute-update(is_muted);
        }
    }
}

export component OscillatorMixer inherits VerticalLayout {
    callback osc-mixer-level-update(int, float);
    callback osc-mixer-balance-update(int, float);
    callback osc-mixer-mute-update(int, bool);

    HorizontalLayout {
        padding: Theme.global-panel-padding;
        spacing: Theme.global-panel-spacing;

        osc1-mix := MixerStrip {
            label: Theme.osc-mixer-title-1;
            default-value: Constant.DEFAULT_OSCILLATOR_LEVEL_NORMAL;
            mixer-balance-update(balance) => {
                osc-mixer-balance-update(1, balance);
            }
            mixer-level-update(level) => {
                osc-mixer-level-update(1, level);
            }
            mixer_mute_update(is_muted) => {
                osc-mixer-mute-update(1, is_muted);
            }
        }

        VerticalSpacer { }

        osc2-mix := MixerStrip {
            label: Theme.osc-mixer-title-2;
            default-value: Constant.DEFAULT_OSCILLATOR_LEVEL_NORMAL;
            mixer-balance-update(balance) => {
                osc-mixer-balance-update(2, balance);
            }
            mixer-level-update(level) => {
                osc-mixer-level-update(2, level);
            }
            mixer_mute_update(is_muted) => {
                osc-mixer-mute-update(2, is_muted);
            }
        }

        VerticalSpacer { }

        osc3-mix := MixerStrip {
            label: Theme.osc-mixer-title-3;
            default-value: Constant.DEFAULT_OSCILLATOR_LEVEL_NORMAL;
            mixer-balance-update(balance) => {
                osc-mixer-balance-update(3, balance);
            }
            mixer-level-update(level) => {
                osc-mixer-level-update(3, level);
            }
            mixer_mute_update(is_muted) => {
                osc-mixer-mute-update(3, is_muted);
            }
        }

        VerticalSpacer { }

        sub-mix := MixerStrip {
            label: Theme.osc-mixer-title-sub;
            default-value: Constant.DEFAULT_SUB_OSCILLATOR_LEVEL_NORMAL;
            mixer-balance-update(balance) => {
                osc-mixer-balance-update(0, balance);
            }
            mixer-level-update(level) => {
                osc-mixer-level-update(0, level);
            }
            mixer_mute_update(is_muted) => {
                osc-mixer-mute-update(0, is_muted);
            }
        }

        VerticalSpacer { }
    }
}

export component MixerSection inherits VerticalLayout {
    callback output-balance-update(float);
    callback output-level-update(float);
    callback output-mute-update(bool);
    callback osc-mixer-balance-update(int, float);
    callback osc-mixer-level-update(int, float);
    callback osc-mixer-mute-update(int, bool);

    alignment: start;
    padding-top: Theme.global-panel-padding;

    PanelLabel {
        label: Theme.osc-mixer-label;
    }

    VerticalLayout {
        alignment: start;

        HorizontalLayout {

            VerticalSpacer { }

            outout-mixer := OutputMixer {
                output-balance-update(value) => {
                   output-balance-update(value);
                }
                output-level-update(value) => {
                    output-level-update(value);
                }
                output-mute-update(bool) => {
                   output-mute-update(bool);
                }
            }

            VerticalSpacer { }

            oscillator-mixer := OscillatorMixer {
                osc-mixer-balance-update(oscillator, balance) => {
                    osc-mixer-balance-update(oscillator, balance);
                }
                osc-mixer-level-update(oscillator, level) => {
                    osc-mixer-level-update(oscillator, level);
                }
                osc-mixer-mute-update(oscillator, is_muted) => {
                    osc-mixer-mute-update(oscillator, is_muted);
                }
            }
        }
    }
}

export component OscillatorSection inherits VerticalLayout {
    alignment: start;

    HorizontalLayout {
        alignment: start;
        HorizontalLayout {
            padding: Theme.global-panel-padding;
            spacing: Theme.global-panel-spacing;
            alignment: start;

            portamento-section := VerticalLayout {
                padding: Theme.global-panel-padding;
                spacing: Theme.global-panel-spacing;
                alignment: space-between;

                ToggleSwitch {
                    label: Theme.osc-options-portamento-label;
                }

                HorizontalParameterSlider {
                    label: Theme.osc-options-portamento-time-label;
                    value-units: Theme.osc-options-portamento-time-postfix;
                    default-value: 0;
                }
            }

            VerticalSpacer { }

            HorizontalLayout {
                padding: Theme.global-panel-padding;
                spacing: Theme.global-panel-spacing;
                alignment: space-between;

                VerticalLayout {
                    alignment: space-between;

                    IntSpinBox {
                        label: Theme.osc-options-pitch-bend-range;
                        default-value: 12;
                        step: 1;
                        width: 120px;
                    }

                    CenteredParameterSlider {
                        label: Theme.osc-options-velocity-curve;
                        value: 0;
                        width: 120px;
                    }
                }

                VerticalSpacer { }

                VerticalLayout {
                    alignment: space-between;

                    ToggleSwitch {
                        label: Theme.osc-options-hard-sync;
                    }

                    ToggleSwitch {
                        label: Theme.osc-options-key-sync;
                    }
                }

                VerticalSpacer { }
            }
        }
    }
}

export component AmpEnvelopeSection inherits VerticalLayout {
    callback envelope-attack-changed(float);
    callback envelope-decay-changed(float);
    callback envelope-sustain-changed(float);
    callback envelope-release-changed(float);
    callback envelope-invert-changed(bool);

    alignment: start;
    padding-top: Theme.global-panel-padding;

    PanelLabel {
        label: Theme.amp-envelope-section-label;
    }

    EnvelopeSection {
        envelope-attack-changed(milliseconds) => {
            envelope-attack-changed(milliseconds);
        }
        envelope-decay-changed(milliseconds) => {
            envelope-decay-changed(milliseconds);
        }
        envelope-sustain-changed(level) => {
            envelope-sustain-changed(level);
        }
        envelope-release-changed(milliseconds) => {
            envelope-release-changed(milliseconds);
        }
        envelope-invert-changed(is_active) => {
            envelope-invert-changed(is_active);
        }
    }
}

export component ModWheelSection inherits VerticalLayout {
    callback lfo-frequency-changed(int, float);
    callback lfo-shape-changed(int, string);
    callback lfo-phase-changed(int, float);
    callback lfo-phase-reset(int);

    alignment: start;
    padding-top: Theme.global-panel-padding;

    PanelLabel {
        label: Theme.mod-wheel-section-label;
    }

    HorizontalLayout {
        alignment: start;
        VerticalSpacer { }

        FixedCenterLFOSection {
            lfo-frequency-changed(frequency) => {
                lfo-frequency-changed(Constant.LFO_MOD_WHEEL_INDEX, frequency);
            }
            lfo-shape-changed(shape) => {
                lfo-shape-changed(Constant.LFO_MOD_WHEEL_INDEX, shape);
            }
            lfo-phase-changed(phase) => {
                lfo-phase-changed(Constant.LFO_MOD_WHEEL_INDEX, phase);
            }
            lfo-phase-reset() => {
                lfo-phase-reset(Constant.LFO_MOD_WHEEL_INDEX);
            }
        }
    }
}

export component GlobalPanel inherits Panel {
    callback envelope-attack-changed(int, float);
    callback envelope-decay-changed(int, float);
    callback envelope-sustain-changed(int, float);
    callback envelope-release-changed(int, float);
    callback envelope-invert-changed(int, bool);
    callback lfo-frequency-changed(int, float);
    callback lfo-shape-changed(int, string);
    callback lfo-phase-changed(int, float);
    callback lfo-phase-reset(int);

    height: Theme.global-panel-height;
    width: Theme.global-panel-width;

    HorizontalLayout {
        width: parent.width;
        mixer-section := MixerSection { }

        VerticalLayout {
            alignment: start;
            HorizontalLayout {
                alignment: start;
                amp-section := AmpEnvelopeSection {
                    envelope-attack-changed(milliseconds) => {
                        envelope-attack-changed(Constant.ENVELOPE_AMP_INDEX, milliseconds);
                    }
                    envelope-decay-changed(milliseconds) => {
                        envelope-decay-changed(Constant.ENVELOPE_AMP_INDEX, milliseconds);
                    }
                    envelope-sustain-changed(level) => {
                        envelope-sustain-changed(Constant.ENVELOPE_AMP_INDEX, level);
                    }
                    envelope-release-changed(milliseconds) => {
                        envelope-release-changed(Constant.ENVELOPE_AMP_INDEX, milliseconds);
                    }
                    envelope-invert-changed(is_active) => {
                        envelope-invert-changed(Constant.ENVELOPE_AMP_INDEX, is_active);
                    }
                }

                mod-wheel-section := ModWheelSection {
                    lfo-frequency-changed(lfo_index, frequency) => {
                        lfo-frequency-changed(lfo_index, frequency);
                    }
                    lfo-shape-changed(lfo_index, shape) => {
                        lfo-shape-changed(lfo_index, shape);
                    }
                    lfo-phase-changed(lfo_index, phase) => {
                        lfo-phase-changed(lfo_index, phase);
                    }
                    lfo-phase-reset(lfo_index) => {
                        lfo-phase-reset(lfo_index);
                    }
                }
            }

            HorizontalSpacer { }

            osc-section := OscillatorSection { }
        }
    }
}
