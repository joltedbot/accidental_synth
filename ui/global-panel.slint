import {
    Panel,
    VerticalSpacer,
    SectionLabel,
    CenteredParameterSlider,
    PanelLabel,
    HorizontalSpacer,
    ComponentLabel,
    MixerLevel,
    MixerBalance,
    MixerMute,
    ToggleSwitch,
    HorizontalParameterSlider,
    IntSpinBox,
    EnvelopeSection,
    FixedCenterLFOSection,
    Envelope,
    LFO,
} from "components.slint";
import { Theme } from "theme.slint";
import { Constant } from "constants.slint";
import {
    VerticalSlider,
    HorzontalSlider,
    BalanceSlider,
} from "custom-widgets.slint";
import { ComboBox, TextEdit } from "std-widgets.slint";

export struct Mixer {
    level: float,
    balance: float,
    is_muted: bool,
}


export component MixerStrip inherits VerticalLayout {
    in property <Mixer> mixer-strip-values;
    in property <string> label;

    callback mixer-level-update(float);
    callback mixer-balance-update(float);
    callback mixer_mute_update(bool);

    width: 56px;

    SectionLabel {
        label: label;
    }

    HorizontalSpacer { }

    VerticalLayout {
        padding: Theme.global-panel-padding;
        spacing: Theme.global-panel-spacing + 5px;

        alignment: space-between;

        MixerBalance {
            value: mixer-strip-values.balance;
            mixer-balance-update(value) => {
                root.mixer-balance-update(value);
            }
        }

        MixerLevel {
            value: mixer-strip-values.level;
            mixer-level-update(value) => {
                root.mixer-level-update(value);
            }
        }

        MixerMute {
            is_muted: mixer-strip-values.is_muted;
            mixer_mute_update(is_muted) => {
                root.mixer_mute_update(is_muted);
            }
        }
    }
}

export component OutputMixer inherits VerticalLayout {
    in property <Mixer> output-mixer-values;
    callback output-level-update(float);
    callback output-balance-update(float);
    callback output-mute-update(bool);

    padding: Theme.global-panel-padding;
    spacing: Theme.global-panel-spacing;

    output := MixerStrip {
        label: Theme.output-mixer-label;
        mixer-strip-values: output-mixer-values;

        mixer-balance-update(balance) => {
            output-balance-update(balance);
        }
        mixer-level-update(level) => {
            output-level-update(level);
        }
        mixer_mute_update(is_muted) => {
            output-mute-update(is_muted);
        }
    }
}

export component OscillatorMixer inherits VerticalLayout {
    in property <[Mixer]> oscillator-mixer-values;

    callback osc-mixer-level-update(int, float);
    callback osc-mixer-balance-update(int, float);
    callback osc-mixer-mute-update(int, bool);

    HorizontalLayout {
        padding: Theme.global-panel-padding;
        spacing: Theme.global-panel-spacing;

        for mixer-strip[index] in oscillator-mixer-values: HorizontalLayout {

            MixerStrip {
                label: Theme.osc-mixer-titles[index];
                mixer-strip-values: mixer-strip;
                mixer-balance-update(balance) => {
                    osc-mixer-balance-update(index, balance);
                }
                mixer-level-update(level) => {
                    osc-mixer-level-update(index, level);
                }
                mixer_mute_update(is_muted) => {
                    osc-mixer-mute-update(index, is_muted);
                }
            }

            VerticalSpacer { }
        }
    }
}

export component MixerSection inherits VerticalLayout {
    in property <Mixer> output-mixer-values;
    in property <[Mixer]> oscillator-mixer-values;

    callback output-balance-update(float);
    callback output-level-update(float);
    callback output-mute-update(bool);
    callback osc-mixer-balance-update(int, float);
    callback osc-mixer-level-update(int, float);
    callback osc-mixer-mute-update(int, bool);

    alignment: start;
    padding-top: Theme.global-panel-padding;

    PanelLabel {
        label: Theme.osc-mixer-label;
    }

    VerticalLayout {
        alignment: start;

        HorizontalLayout {

            VerticalSpacer { }

            outout-mixer := OutputMixer {
                output-mixer-values: output-mixer-values;
                output-balance-update(value) => {
                    output-balance-update(value);
                }
                output-level-update(value) => {
                    output-level-update(value);
                }
                output-mute-update(bool) => {
                    output-mute-update(bool);
                }
            }

            VerticalSpacer { }

            oscillator-mixer := OscillatorMixer {
                oscillator-mixer-values: oscillator-mixer-values;
                osc-mixer-balance-update(oscillator, balance) => {
                    osc-mixer-balance-update(oscillator, balance);
                }
                osc-mixer-level-update(oscillator, level) => {
                    osc-mixer-level-update(oscillator, level);
                }
                osc-mixer-mute-update(oscillator, is_muted) => {
                    osc-mixer-mute-update(oscillator, is_muted);
                }
            }
        }
    }
}

export component OscillatorSection inherits VerticalLayout {
    in property <bool> portamento-is-enabled;
    in property <float> portamento-time;
    in property <int> pitch-bend-range;
    in property <float> velocity-curve-slope;
    in property <bool> hard-sync-is-enabled;
    in property <bool> key-sync-is-enabled;

    callback portamento-enabled(bool);
    callback portamento-time-changed(float);
    callback pitch-bend-range-changed(float);
    callback velocity-curve-changed(float);
    callback hard-sync-enabled(bool);
    callback key-sync-enabled(bool);

    alignment: start;

    HorizontalLayout {
        alignment: start;
        HorizontalLayout {
            padding: Theme.global-panel-padding;
            spacing: Theme.global-panel-spacing;
            alignment: start;

            portamento-section := VerticalLayout {
                padding: Theme.global-panel-padding;
                spacing: Theme.global-panel-spacing;
                alignment: space-between;

                ToggleSwitch {
                    is_enabled: portamento-is-enabled;
                    label: Theme.osc-options-portamento-label;
                    toggle_switch_updated(is_enabled) => {
                        portamento-enabled(is_enabled);
                    }
                }

                HorizontalParameterSlider {
                    label: Theme.osc-options-portamento-time-label;
                    value: portamento-time;
                    horizontal-parameter-slider-changed(milliseconds) => {
                        portamento-time-changed(milliseconds);
                    }
                }
            }

            VerticalSpacer { }

            HorizontalLayout {
                padding: Theme.global-panel-padding;
                spacing: Theme.global-panel-spacing;
                alignment: space-between;

                VerticalLayout {
                    alignment: space-between;

                    IntSpinBox {
                        label: Theme.osc-options-pitch-bend-range;
                        value: pitch-bend-range;
                        step: 1;
                        width: 120px;
                        spinbox-changed(range) => {
                            pitch-bend-range-changed(range);
                        }
                    }

                    CenteredParameterSlider {
                        label: Theme.osc-options-velocity-curve;
                        value: velocity-curve-slope;
                        width: 120px;
                        centered-parameter-slider-changed(curve) => {
                            velocity-curve-changed(curve);
                        }
                    }
                }

                VerticalSpacer { }

                VerticalLayout {
                    alignment: space-between;

                    hard_sync := ToggleSwitch {
                        label: Theme.osc-options-hard-sync;
                        is_enabled: hard-sync-is-enabled;
                        toggle_switch_updated(is_enabled) => {
                            hard-sync-enabled(is_enabled);
                        }
                    }

                    key_sync := ToggleSwitch {
                        label: Theme.osc-options-key-sync;
                        is_enabled: hard-sync-is-enabled;
                        toggle_switch_updated(is_enabled) => {
                            key-sync-enabled(is_enabled);
                        }
                    }
                }

                VerticalSpacer { }
            }
        }
    }
}

export component AmpEnvelopeSection inherits VerticalLayout {
    in property <Envelope> amp-eq-values;
    callback envelope-attack-changed(float);
    callback envelope-decay-changed(float);
    callback envelope-sustain-changed(float);
    callback envelope-release-changed(float);
    callback envelope-invert-changed(bool);

    alignment: start;
    padding-top: Theme.global-panel-padding;

    PanelLabel {
        label: Theme.amp-envelope-section-label;
    }

    EnvelopeSection {
        envelope-values: amp-eq-values;
        envelope-attack-changed(milliseconds) => {
            envelope-attack-changed(milliseconds);
        }
        envelope-decay-changed(milliseconds) => {
            envelope-decay-changed(milliseconds);
        }
        envelope-sustain-changed(level) => {
            envelope-sustain-changed(level);
        }
        envelope-release-changed(milliseconds) => {
            envelope-release-changed(milliseconds);
        }
        envelope-invert-changed(is_active) => {
            envelope-invert-changed(is_active);
        }
    }
}

export component ModWheelSection inherits VerticalLayout {
    in property <LFO> mod-wheel-lfo-values;
    callback lfo-frequency-changed(int, float);
    callback lfo-shape-changed(int, string);
    callback lfo-phase-changed(int, float);
    callback lfo-phase-reset(int);

    alignment: start;
    padding-top: Theme.global-panel-padding;

    PanelLabel {
        label: Theme.mod-wheel-section-label;
    }

    HorizontalLayout {
        alignment: start;
        VerticalSpacer { }

        FixedCenterLFOSection {
            lfo-values: mod-wheel-lfo-values;
            lfo-frequency-changed(frequency) => {
                lfo-frequency-changed(Constant.LFO_MOD_WHEEL_INDEX, frequency);
            }
            lfo-shape-changed(shape) => {
                lfo-shape-changed(Constant.LFO_MOD_WHEEL_INDEX, shape);
            }
            lfo-phase-changed(phase) => {
                lfo-phase-changed(Constant.LFO_MOD_WHEEL_INDEX, phase);
            }
            lfo-phase-reset() => {
                lfo-phase-reset(Constant.LFO_MOD_WHEEL_INDEX);
            }
        }
    }
}

export component GlobalPanel inherits Panel {
    in property <Envelope> amp-eq-values;
    in property <LFO> mod-wheel-lfo-values;

    in property <Mixer> output-mixer-values;
    in property <[Mixer]> oscillator-mixer-values;
    in property <bool> portamento-is-enabled;
    in property <float> portamento-time;
    in property <int> pitch-bend-range;
    in property <float> velocity-curve-slope;
    in property <bool> hard-sync-is-enabled;
    in property <bool> key-sync-is-enabled;

    callback envelope-attack-changed(int, float);
    callback envelope-decay-changed(int, float);
    callback envelope-sustain-changed(int, float);
    callback envelope-release-changed(int, float);
    callback envelope-invert-changed(int, bool);
    callback lfo-frequency-changed(int, float);
    callback lfo-shape-changed(int, string);
    callback lfo-phase-changed(int, float);
    callback lfo-phase-reset(int);
    callback portamento-enabled(bool);
    callback portamento-time-changed(float);
    callback pitch-bend-range-changed(float);
    callback velocity-curve-changed(float);
    callback hard-sync-enabled(bool);
    callback key-sync-enabled(bool);
    callback output-balance-update(float);
    callback output-level-update(float);
    callback output-mute-update(bool);
    callback osc-mixer-balance-update(int, float);
    callback osc-mixer-level-update(int, float);
    callback osc-mixer-mute-update(int, bool);

    height: Theme.global-panel-height;
    width: Theme.global-panel-width;

    HorizontalLayout {
        width: parent.width;
        mixer-section := MixerSection {
            output-mixer-values: output-mixer-values;
            oscillator-mixer-values: oscillator-mixer-values;

            output-balance-update(value) => {
                output-balance-update(value);
            }
            output-level-update(value) => {
                output-level-update(value);
            }
            output-mute-update(bool) => {
                output-mute-update(bool);
            }
            osc-mixer-balance-update(oscillator, balance) => {
                osc-mixer-balance-update(oscillator, balance);
            }
            osc-mixer-level-update(oscillator, level) => {
                osc-mixer-level-update(oscillator, level);
            }
            osc-mixer-mute-update(oscillator, is_muted) => {
                osc-mixer-mute-update(oscillator, is_muted);
            }
        }

        VerticalLayout {
            alignment: start;
            HorizontalLayout {
                alignment: start;
                amp-section := AmpEnvelopeSection {
                    amp-eq-values: amp-eq-values;
                    envelope-attack-changed(milliseconds) => {
                        envelope-attack-changed(Constant.ENVELOPE_AMP_INDEX, milliseconds);
                    }
                    envelope-decay-changed(milliseconds) => {
                        envelope-decay-changed(Constant.ENVELOPE_AMP_INDEX, milliseconds);
                    }
                    envelope-sustain-changed(level) => {
                        envelope-sustain-changed(Constant.ENVELOPE_AMP_INDEX, level);
                    }
                    envelope-release-changed(milliseconds) => {
                        envelope-release-changed(Constant.ENVELOPE_AMP_INDEX, milliseconds);
                    }
                    envelope-invert-changed(is_active) => {
                        envelope-invert-changed(Constant.ENVELOPE_AMP_INDEX, is_active);
                    }
                }

                mod-wheel-section := ModWheelSection {
                    mod-wheel-lfo-values: mod-wheel-lfo-values;
                    lfo-frequency-changed(lfo_index, frequency) => {
                        lfo-frequency-changed(lfo_index, frequency);
                    }
                    lfo-shape-changed(lfo_index, shape) => {
                        lfo-shape-changed(lfo_index, shape);
                    }
                    lfo-phase-changed(lfo_index, phase) => {
                        lfo-phase-changed(lfo_index, phase);
                    }
                    lfo-phase-reset(lfo_index) => {
                        lfo-phase-reset(lfo_index);
                    }
                }
            }

            HorizontalSpacer { }

            osc-section := OscillatorSection {
                portamento-is-enabled: portamento-is-enabled;
                portamento-time: portamento-time;
                pitch-bend-range: pitch-bend-range;
                velocity-curve-slope: velocity-curve-slope;
                hard-sync-is-enabled: hard-sync-is-enabled;
                key-sync-is-enabled: key-sync-is-enabled;

                portamento-enabled(is_enabled) => {
                    portamento-enabled(is_enabled);
                }
                portamento-time-changed(milliseconds) => {
                    portamento-time-changed(milliseconds);
                }
                pitch-bend-range-changed(range) => {
                    pitch-bend-range-changed(range);
                }
                velocity-curve-changed(curve) => {
                    velocity-curve-changed(curve);
                }
                hard-sync-enabled(is_enabled) => {
                    hard-sync-enabled(is_enabled);
                }
                key-sync-enabled(is_enabled) => {
                    key-sync-enabled(is_enabled);
                }
            }
        }
    }
}
