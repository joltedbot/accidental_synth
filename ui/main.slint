import "../../fonts/HackNerdFontMono-Regular.ttf";
import "../../fonts/HackNerdFontMono-Bold.ttf";
import { Theme } from "theme.slint";
import { TabWidget, Slider, VerticalBox, SpinBox } from "std-widgets.slint";
import { Panel } from "components.slint";
import { GlobalPanel } from "global-panel.slint";
import { HeaderPanel } from "header-panel.slint";
import { FilterPanel } from "filter-panel.slint";
import { OscillatorsPanel } from "oscillator-panel.slint";
import { EffectsPanel } from "effects.slint";


export component AccidentalSynth inherits Window {
    title: Theme.window-title;
    icon: Theme.icon;
    background: transparent;
    width: Theme.window-width;
    height: Theme.window-height;
    default-font-size: Theme.default-text-size;
    default-font-family: Theme.default-font-family;
    default-font-weight: Theme.default-font-weight;

    // Oscillator Panel Callbacks and Properties
    callback osc-wave_shape_changed(int, string);
    callback osc-course-tune-changed(int, float);
    callback osc-fine-tune-changed(int, float);
    callback osc-clipper-boost-changed(int, float);
    callback osc-parameter1-changed(int, float);
    callback osc-parameter2-changed(int, float);



    top-level := Rectangle {
        background: Theme.window-background;
        border-width: Theme.window-border-width;
        border-color: Theme.window-border-colour;
        border-bottom-left-radius: Theme.window-border-radius;
        border-bottom-right-radius: Theme.window-border-radius;
        height: parent.height;

        VerticalLayout {
            padding: 0px;
            spacing: 0px;
            alignment: start;

            header-panel := HeaderPanel {
                width: Theme.window-width;
            }

            tab-bar := TabWidget {
                height: parent.height;
                Tab {
                    title: Theme.tab-title-oscillators;
                    HorizontalLayout {

                        VerticalLayout {
                            oscillator-panel := OscillatorsPanel {
                                wave_shape_changed(oscillator, shape) => {
                                    osc-wave_shape_changed(oscillator, shape);
                                }
                                course-tune-changed(oscillator, semitones) => {
                                    osc-course-tune-changed(oscillator, semitones);
                                }
                                fine-tune-changed(oscillator, cents) => {
                                    osc-fine-tune-changed(oscillator, cents);
                                }
                                clipper-boost-changed(oscillator, boost) => {
                                    osc-clipper-boost-changed(oscillator, boost);
                                }
                                parameter1-changed(oscillator, value) => {
                                    osc-parameter1-changed(oscillator, value);
                                }
                                parameter2-changed(oscillator, value) => {
                                    osc-parameter2-changed(oscillator, value);
                                }
                            }

                            global-panel := GlobalPanel { }
                        }

                        filter-panel := FilterPanel {
                            width: Theme.filter-panel-width;
                        }
                    }
                }

                Tab {
                    title: Theme.tab-title-effects;
                    EffectsPanel {
                        title: "TBD";
                    }
                }
            }
        }
    }
}
